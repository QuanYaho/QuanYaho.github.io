[{"title":"apply和call的使用","date":"2017-09-30T16:00:04.000Z","path":"2017/10/01/apply-and-call/","text":"call()和apply()是Function的方法，它的第一个参数是this，第二个参数是Function的参数。这两个方法是为了动态改变this而出现的。即当一个object没有某个方法，但是其他的对象有，那就可以借助call或apply用其他对象的方法来操作。用法如下：var name = &apos;balala&apos;; function sayHello(a,b) { console.log(this.name + &apos;吃了&apos;+(a+b) +&apos;馒头&apos;); } var obj1 = { name:&apos;燕子&apos; }; var arr= []; sayHello.apply(obj1,[]); //燕子吃了NaN馒头 (this 指向obj,参数为空) arr.push(2); arr.push(8); sayHello.apply(obj1,arr); //燕子吃了10馒头 this 指向obj,参数为2,8这里obj中的name属性的值会替换掉sayHello方法中的name属性的值 1.apply1sayHello.apply(obj,arr); // 函数名.apply(对象,数组); 这句代码的意思是：obj1这个对象需要调用sayHello(参数)这个方法（函数）给自己使用，并且传入sayHello()的参数是数组arr。 #####apply(参数1,参数2)方法 参数1：将this修改成要绑定的对象。 参数2：函数需要的参数列表，它是数组Array。 2.callfunction test(a,b,c,d) { console.log(&apos;测试输出的是：&apos;+a+b+c+d); } var obj2 = { speak:&apos;嗨！朋友们&apos; } test.call(obj2,&apos;9&apos;,&apos;8&apos;,&apos;7&apos;,&apos;6&apos;);//测试输出的是：9876``` ####test.call(obj2,’9’,’8’,’7’,’6’); 函数名.call(对象,参数1,参数2,…,参数n) 这句代码的意思是：obj2这个对象需要调用test() 这个方法（函数）给自己使用，并且在test()中传入参数，注意call()是使用单个参数进行传递。 3.如何判断使用apply还是call？ 当确定函数的形参有多少个的时候使用call。 当函数的形参个数不确定时使用apply。 apply把参数打包成Array再传入，call把参数按顺序传入。 4.关于参数为null的问题 如果call和apply的第一个参数是null的话，this指向window 对于普通函数的调用，通常将this绑定为null。 Math.max.apply(null,[3,4,5]); //输出5 Math.max.call(null,7,8,9); //输出9 5.结合数组方法使用的例子var obj3 = {}; [].push.apply(obj3,[&quot;a&quot;,&quot;bb&quot;,&quot;ccc&quot;,&quot;dddd&quot;]); console.log(obj3); //输出{0: &quot;a&quot;, 1: &quot;bb&quot;, 2: &quot;ccc&quot;, 3: &quot;dddd&quot;, length: 4} 这段代码的意思：借用数组的push方法给obj3，按照下标的方式添加属性值，并且会自动维护length属性 [].pop.call(obj3); //删除并返回dddd console.log(obj3); //输出{0: &quot;a&quot;, 1: &quot;bb&quot;, 2: &quot;ccc&quot;, length: 3} 借用数组的pop方法删除obj3的最后一个属性值","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.quanyanhua.com/tags/JavaScript/"}]},{"title":"使用hexo（01）","date":"2017-08-01T00:55:12.000Z","path":"2017/08/01/about-hexo-01/","text":"上传文章到hexo遇到问题的解决步骤创建文章 hexo new “New article Name” 会在f:\\blog\\source目录下生成一个md文件 可以简写成 hexo n “New article Name” 部署到Github 部署到Github前需要配置_config.yml文件 # Deployment ## Docs: http://hexo.io/docs/deployment.html deploy: type: 改成： # Deployment ## Docs: http://hexo.io/docs/deployment.html deploy: type: git repository: github仓库的ssh branch: master 如果是为一个项目制作网站，那么需要把branch设置为gh-pages。 同步到hexo和GitHub失败 错误提示： ERROR Deployer not found: github 解决办法： npm install hexo-deployer-git --save 改了之后执行，然后再部署 问题根源：hexo 更新到3.0之后，deploy的type 的github需要改成git 部署步骤 hexo clean hexo generate hexo deploy hexo g #生成 hexo s #启动本地服务，进行文章预览调试 常用命令 hexo 命令 hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本hexo deploy -g #生成加部署hexo server -g #生成加预览 命令的简写 hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 部署文件需要三步 hexo c hexo g hexo d 复合命令 hexo deploy -g #生成加部署 hexo server -g #生成加预览","tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.quanyanhua.com/tags/hexo/"}]},{"title":"css:与外边距margin相关","date":"2017-07-03T02:01:03.000Z","path":"2017/07/03/css-margin/","text":"1.标准流中的margin水平：左右两个盒子的外边距是可以叠加的，不会丢失垂直： 上下两个盒子，谁的外边距大，听谁的（外边距的合并） 什么是外边距重叠？重叠的结果是什么？外边距重叠就是margin-collapse。在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。折叠结果遵循下列计算规则：两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。两个外边距一正一负时，折叠结果是两者的相加的和。 2.box-sizing取值box-sizing:content-box // 元素的宽高 = 边框 + 内边距 + 内容宽高 （默认取值）&lt;br&gt; box-sizing:border-box // 元素的宽高 = width/height的宽高 3.两个嵌套关系的盒子 (1) 如果里面的盒子设置了margin-top，那么父盒子也会被顶下来。 ——解决：给父盒子添加border属性 建议：实现嵌套关系的盒子之间的距离时应该先考虑padding，其次考虑margin。margin本质上是用于控制兄弟之间的间隙的。Padding是用来控制父子关系的。 (2) margin： 0 auto; 只对水平方向有效，对垂直方向无效。在嵌套关系的盒子中，子盒子相对于父盒子水平居中。 4.BFCBFC(block formatting context）：简单来说，BFC 就是一种属性，这种属性会影响着元素的定位以及与其兄弟元素之间的相互作用。 BFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题。BFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用 5.两种CSS的盒子模型？标准 W3C 盒子模型：内容(content)、填充(padding)、边界(margin)、 边框(border)IE 盒子模型：IE 的content部分包含了 border 和 pading","tags":[{"name":"css","slug":"css","permalink":"http://www.quanyanhua.com/tags/css/"}]}]